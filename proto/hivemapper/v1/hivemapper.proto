syntax = "proto3";

package hivemapper.types.v1;

message Output {
  repeated TokenSplittingPayment token_splitting_payments = 1;
  repeated DriverPayment driver_payments = 2;
  repeated DriverFoundationPayment driver_foundation_payments = 3;
  repeated AiTrainerPayment ai_trainer_payments = 4;
  repeated Transfer transfers = 5;
  repeated Mint mints = 6;
  repeated Burn burns = 7;
  repeated TransferChecked transfer_checks = 8;
  repeated MintToChecked mint_to_checks = 9;
  repeated BurnChecked burn_checks = 10;
}

message TokenSplittingPayment {
  Payment manager = 1;
  Payment driver = 2;
}

message DriverPayment {
  enum DRIVER_TYPE {
    UNSET = 0;
    REGULAR = 1; // Someone not part of a fleet
    NO_SPLIT = 2; // We can't know if it's a manager or a fleet member at this point
  }

  Payment payment = 1;
  DRIVER_TYPE type = 2;
}

message DriverFoundationPayment {
  Payment payment = 1;
}

message AiTrainerPayment {
  Payment payment = 1;
}

message Payment {
  int64 timestamp = 1;
  string trx_hash = 2;
  Mint mint = 3;
}

message Transfer {
  string trx_hash = 1;
  int64 timestamp = 2;
  string from = 3;
  string to = 4;
  double amount = 5;
}

message Mint {
  string trx_hash = 1;
  int64 timestamp = 2;
  string to = 4;
  int64 amount = 5;
}

message Burn {
  string trx_hash = 1;
  int64 timestamp = 2;
  string from = 3;
  int64 amount = 5;
}

message TransferChecked {
  string trx_hash = 1;
  int64 timestamp = 2;
  string from = 3;
  string to = 4;
  double amount = 5;
  int32 decimals = 6;
}

message MintToChecked {
  string trx_hash = 1;
  int64 timestamp = 2;
  string to = 4;
  int64 amount = 5;
  int32 decimals = 6;
}

message BurnChecked {
  string trx_hash = 1;
  int64 timestamp = 2;
  string from = 3;
  int64 amount = 5;
  int32 decimals = 6;
}
